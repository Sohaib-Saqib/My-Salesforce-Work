public class UpdateRecurringFee {
    
    public static void RecurringFeeUpdate(List<OpportunityLineItem> newOpportunityLineItems, List<OpportunityLineItem> oldOpportunityLineItems, 
                       Map<ID, OpportunityLineItem> newOpportunityMaps , Map<ID, OpportunityLineItem> oldOpportunityMaps) {
        
        // Get the Opportunity IDs from the new OpportunityLineItems list
        Set<Id> opportunityIds = new Set<Id>();
        for (OpportunityLineItem o : newOpportunityLineItems) {
            opportunityIds.add(o.OpportunityId);
        }
        
        // Query the OpportunityProducts related to the Opportunities
        Map<Id, List<OpportunityLineItem>> opportunityProductMap = new Map<Id, List<OpportunityLineItem>>();
        for (OpportunityLineItem oli : [SELECT Id, OpportunityId, Recurring_Fee_Monthly__c, Recurring_Fee_Annual__c FROM OpportunityLineItem WHERE OpportunityId IN :opportunityIds]) {
            if (!opportunityProductMap.containsKey(oli.OpportunityId)) {
                opportunityProductMap.put(oli.OpportunityId, new List<OpportunityLineItem>());
            }
            opportunityProductMap.get(oli.OpportunityId).add(oli);
        }
        
        // Calculate the sum of all Recurring_Fee_Monthly__c and Recurring_Fee_Annual__c values on the OpportunityProducts
        Map<Id, Decimal> recurringFeeMonthlyMap = new Map<Id, Decimal>();
        Map<Id, Decimal> recurringFeeAnnualMap = new Map<Id, Decimal>();
        for (Id opportunityId : opportunityProductMap.keySet()) {
            Decimal monthlySum = 0;
            Decimal annualSum = 0;
            for (OpportunityLineItem oli : opportunityProductMap.get(opportunityId)) {
                monthlySum += oli.Recurring_Fee_Monthly__c;
                annualSum += oli.Recurring_Fee_Annual__c;
            }
            recurringFeeMonthlyMap.put(opportunityId, monthlySum);
            recurringFeeAnnualMap.put(opportunityId, annualSum);
        }
        
        // Update the Opportunity with the calculated Recurring_Fee_Monthly__c and Recurring_Fee_Annual__c values
        List<Opportunity> opportunitiesToUpdate = new List<Opportunity>();
        for (Opportunity opp : [SELECT Id, Recurring_Fee_Monthly__c, Recurring_Fee_Annual__c FROM Opportunity WHERE Id IN :opportunityIds]) {
            if (recurringFeeMonthlyMap.containsKey(opp.Id)) {
                opp.Recurring_Fee_Monthly__c = recurringFeeMonthlyMap.get(opp.Id);
                opp.Recurring_Fee_Annual__c = recurringFeeAnnualMap.get(opp.Id);
                opportunitiesToUpdate.add(opp);
            }
        }
        update opportunitiesToUpdate;
    }
}
