@isTest
public class UpdateRecurringFeeTest {
    
    @TestSetup
    static void Setup() {
        
        
      
         chargebeeapps__Coupon__c coupon = new chargebeeapps__Coupon__c(chargebeeapps__Coupon_Id__c = 'autoleapinc-test_alpro-td-50%off-3mo' ,Name = 'Tirecraft Discount: 50% off 1st 3 months' ,
                                                                       chargebeeapps__Status__c = 'ACTIVE', CurrencyIsoCode = 'USD' ,
                                                                       chargebeeapps__Discount_Type__c = 'PERCENTAGE' , chargebeeapps__Duration_Type__c = 'FOREVER' , 
                                                                       chargebeeapps__Discount_Percentage__c = 0.5);
        insert coupon;
        
        Account acc = new Account(Name = 'Test Account 111');
        insert acc;
        
        Opportunity opp = new Opportunity(
            Name = 'Test Opportunity',
            StageName = 'Prospecting',
            CloseDate = Date.today(),
            AccountId = acc.id
        );
        insert opp;
        
        
        Pricebook2 pb2 = new Pricebook2(Name = 'Test Pricebook2', IsActive = true);
        insert pb2;
        
        Product2 prod = new Product2(
            Name = 'Test Product 111',
            IsActive = true,
            CurrencyIsoCode = 'USD',
            chargebeeapps__Product_Type__c = 'PLAN',
            Billing_Frequency__c = 'Monthly' ,
            CB_Coupon_1__c = coupon.id ,
            CB_Coupon_2__c = coupon.id
        );
        insert prod;
        
        Product2 prod2 = new Product2(
            Name = 'Test Product 112',
            IsActive = true,
            CurrencyIsoCode = 'USD',
            chargebeeapps__Product_Type__c = 'PLAN',
            Billing_Frequency__c = 'Monthly' ,
            CB_Coupon_1__c = coupon.id ,
            CB_Coupon_2__c = coupon.id
        );
        insert prod2;
        
        
        Id standardPricebookId = Test.getStandardPricebookId();
        
        
        PricebookEntry stdPrice = new PricebookEntry(
            Pricebook2Id = standardPricebookId,
            Product2Id = prod.Id,
            UnitPrice = 100.00,
            IsActive = true 
        );
        insert stdPrice;
        
        PricebookEntry stdPrice2 = new PricebookEntry(
            Pricebook2Id = standardPricebookId,
            Product2Id = prod2.Id,
            UnitPrice = 1020.00,
            IsActive = true 
        );
        insert stdPrice2;
        
        
        PricebookEntry customPrice = new PricebookEntry(
            Pricebook2Id = pb2.Id,
            Product2Id = prod.Id,
            UnitPrice = 80.00,
            IsActive = true 
        );
        insert customPrice;
        
        PricebookEntry customPrice2 = new PricebookEntry(
            Pricebook2Id = pb2.Id,
            Product2Id = prod2.Id,
            UnitPrice = 80.00,
            IsActive = true 
        );
        insert customPrice2;
        
        OpportunityLineItem oli = new OpportunityLineItem(
            OpportunityId = opp.Id,
            PricebookEntryId = customPrice.Id, 
            Quantity = 1,
            TotalPrice  = 80.00 ,
            CB_Coupon__c = coupon.id , 
            CB_Coupon2__c = coupon.id
        );
        insert oli;
        
        
       /* OpportunityLineItem oli2 = new OpportunityLineItem(
            OpportunityId = opp.Id,
            PricebookEntryId = customPrice2.Id, 
            Quantity = 1,
            TotalPrice  = 80.00 ,
            CB_Coupon__c = coupon.id , 
            CB_Coupon2__c = coupon.id
        );
        insert oli2;*/
       
        chargebeeapps__CB_Opportunity_Coupon__c OPC = new chargebeeapps__CB_Opportunity_Coupon__c (chargebeeapps__CB_Coupon__c = coupon.id , Name = 'Test 111' , CurrencyIsoCode = 'USD', 
                                                                                                   chargebeeapps__Opportunity__c = opp.id);
        insert OPC;
    }
    
    
    @isTest
    public static void Test(){
        Opportunity opp = [Select id from Opportunity where name = 'Test Opportunity' Limit 1];
        List<OpportunityLineItem> oli = [Select id from OpportunityLineItem where OpportunityId = :opp.id];
        Map<ID, OpportunityLineItem> mapOLI = new Map<ID, OpportunityLineItem>([Select id from OpportunityLineItem where OpportunityId = :opp.id]);
        
        Test.startTest();
        UpdateRecurringFee.updateDiscount(oli , oli , mapOLI , mapOLI);
        UpdateRecurringFee.RecurringFeeUpdate(oli , oli , mapOLI , mapOLI);
        Test.stopTest();
    }
}
